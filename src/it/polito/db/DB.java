package it.polito.db;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;


public class DB {
	
	/* conn needs to store connection to the database */
	private Connection conn = null;
	private String course_table = "course";
	private String client_table = "client";
	private String enroll_table = "enrolled";
	
	
	/*
	 * Constructor
	 */
	public DB(){
		/* driver registration */
		/* Remember that the class that implements the JDBC Driver for SQLite is 
		 * org.sqlite.JDBC */
		try {
			Class.forName("org.sqlite.JDBC");
	    } catch(Exception e) {
	    	System.err.println("Error during connection to the database : "+ e);
	    }
		/* end driver registration */
	}
	
	
	/*
	 * Method that open connection to the database.
	 * returns true if connection is correctly open, false otherwise.
	 */
	public boolean OpenConnection(){
		try{
			/* Open connection and store in conn variable 
			 * conn= ..... */
			conn = DriverManager.getConnection("jdbc:sqlite:databases.db");
			
			return true;
		} catch(Exception ex){
			ex.printStackTrace();
			
			return false;
		}
	}
	
	
	private PreparedStatement buildPreparedQuery (String sql) {
		try {
			Statement statement = conn.createStatement();
	        statement.setQueryTimeout(30);  // set timeout to 30 sec.
	        
	        PreparedStatement preparedStatement = conn.prepareStatement(sql);
	        
	        return preparedStatement;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	
	/*
	 * This method receives as an input parameter the code of a client and returns 
	 * the data of this client as a string. The returned string by the method 
	 * is generated by concatenating the names of the client attributes and the values 
	 * of those attributes. For example, if the selected client has “Poul”, surname “White”,
	 * address “Street Inesistente 24, Turin” and mobile number “3933570222”
	 * then the method returns the string: 
	 * “Name: Poul\nSurname: White\nAddress: Street Inesistente 24, Turin\nCell: 3933570222”
	 */
	public String getDataClient(long cod_client) {
		
		String data=null;
		boolean clientExist=true;
		
		try {
			/* Run the query to retrieve information about the client
			 * with the identification code equal to cod_client */
	        
	        String sql = "SELECT * FROM " + client_table + " WHERE codclient = ?";
	        PreparedStatement statement = buildPreparedQuery(sql);
	        
	        if (statement == null) {
	        	return null;
	        }
	        
	        statement.setLong(1, cod_client);
	        ResultSet clients = statement.executeQuery();
	        
	        if (!clients.next()) {
	        	clientExist = false;
	        }
			
			/* If client exists return string with its data.
			 * Otherwise a string with the string: “Client does not exist” */
			if (clientExist==true) {
				/* Modify this portion of code in order to return information of the client 
				 * obtained with the query.
				 * Use the same format of this example for the returning string.
				 * Pay attention to client without mobile number (the field is a NULL type)*/
				String cell = clients.getString("cell");
				
				if (clients.wasNull()) {
					cell = "None";
				}

				data=new String("Name: "+ clients.getString("name") +"\n"+
						"Surname: "+ clients.getString("surname") +"\n"+
						"Address: "+ clients.getString("address") +"\n"+
						"Cell: "+ cell);
			}
			else {
				/* If client does not exist return this string */
				data=new String("Client does not exist");
			}

			
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		
		return data;
		
	}
	
	
	
	/*
	 * This method returns a list of strings. Each string contains the
	 * name of one of the course. The list represents the courses in
	 * which is enrolled the client with the identification code
	 * equal to cod_client.
	 */
	public List<String> getCourseClient(long cod_client) {
		List<String> list=new LinkedList<String>();

		try {
			
			/* Insert the code that accesses to the database 
			 * and retrieves the names of the courses in 
			 * which cod_client is enrolled .
			 * Insert the name in the list of string
			 * (each string of the list is a course name) 
			 * */
			String join = " INNER JOIN "+ enroll_table +" on "+ course_table +".codcourse="+ enroll_table +".codicecourse";
			String sql = "SELECT nameC FROM " + course_table + join +" WHERE codclient = ?";
	        PreparedStatement statement = buildPreparedQuery(sql);
	        
	        if (statement == null) {
	        	return null;
	        }
	        
	        statement.setLong(1, cod_client);
	        ResultSet courses = statement.executeQuery();
			
			/* Example that returns always the same data */
	        while (courses.next()) {
				list.add(courses.getString("nameC"));
			}

		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

		return list;
	}
	
	
	
	/*
	 * This method returns a list of courses codes and names for which there
	 * is at least one empty seat.
	 */
	public List<String> getCodCourses() {
		List<String> list=new LinkedList<String>();

		try {
			/* Insert the code that queries code and name for the courses
			 * that have the AvailableSeats attribute greater than or equal to 1).
			 * Insert in the list a string for each course retrieved from the query. 
			 * */
			String sql = "SELECT codcourse, nameC FROM "+ course_table +" WHERE availableseats >= ?";
	        PreparedStatement statement = buildPreparedQuery(sql);
	        
	        if (statement == null) {
	        	return null;
	        }
	        
	        statement.setInt(1, 1);
	        ResultSet courses = statement.executeQuery();
			
			/* Example that returns always the same courses (pay attention 
			 * to the used format: "cod_course - name_course")*/
	        while (courses.next()) {
				list.add(courses.getInt("codcourse") +" - "+ courses.getString("nameC"));
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

		return list;
	}
	
	
	
	/*
	 * This method receives as input parameters the code of a course and the code of a client 
	 * and it enrolls the client in the course (it inserts a new enrollment in the database). 
	 * Enrollment is the insertion of the new tuple in the Enrolled table
 	 * 
 	 * Then, the method has to modify (decreasing it by one) the value of the available seats  
 	 * for the course with the codCourse.
	 * 
	 * The method returns true if the registration was successful, false otherwise.
	 */
	public boolean addEnroll(long codCourse, long codClient){
		try {
			    /* Insert the code for: 
			     * 1 - insert the new tuple in the Enrolled table, with codClient and codCourse.  
			     * 2 - update the number of the available seats (course.AvailableSeats)
			     *     for the course with codCourse.
			     *     
			     * Pay attention because both operations have to finish correctly, 
			     * or have to cancel both operations if one of them fails (look 
			     * at the slide on managing transactions in JDBC)
			     * */ 
			conn.setAutoCommit(false);
			
			// create a new enrollment in the enrolled table
			java.util.Date today = new java.util.Date();
			Date date = new Date(today.getTime());
			String insert_sql = "INSERT INTO enrolled(codclient, codicecourse, enrolldate) VALUES(?, ?, ?)";
	        PreparedStatement insertion = buildPreparedQuery(insert_sql);
	        
	        if (insertion == null) {
	        	return false;
	        }
	        
	        insertion.setLong(1, codClient);
	        insertion.setLong(2, codCourse);
	        insertion.setDate(3, date);
	        insertion.executeUpdate();
	        
	        // update the available seats in the course table
	        String update_sql = "UPDATE course SET availableseats = availableseats-1 WHERE codcourse = ?";
	        PreparedStatement update = buildPreparedQuery(update_sql);
	        
	        if (update == null) {
	        	return false;
	        }
	        
	        update.setLong(1, codCourse);
	        update.executeUpdate();
	        
	        // commit the changes
	        conn.commit();

			return true;
		} catch (Exception e) {
				e.printStackTrace();
				return false;
		}
		
	}
	
	
	/*
	 * This method closes the connection to the database.
	 */
	public void CloseConnection(){
		try {
			
			/* Insert here the code */
		} catch (Exception e) {
			System.err.println("Error in closing the connection with the DB!");
		}
	}
}
